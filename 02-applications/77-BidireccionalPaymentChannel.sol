// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "./ECDSA.sol";

/*
üìå Canal de pago bidireccional que permite transferencias de Ether en ambas direcciones.

üîπ Flujo del contrato:
1Ô∏è‚É£ Ambos usuarios depositan fondos en una billetera multi-firma.
2Ô∏è‚É£ Se precomputa la direcci√≥n del canal de pago.
3Ô∏è‚É£ Intercambian firmas con los saldos iniciales.
4Ô∏è‚É£ Se despliega el canal de pago desde la billetera multi-firma.

üîπ Actualizaci√≥n de balances:
1Ô∏è‚É£ Los usuarios firman los nuevos balances fuera de la cadena.
2Ô∏è‚É£ Cancelan la transacci√≥n que hubiera desplegado el canal anterior.
3Ô∏è‚É£ Env√≠an una nueva transacci√≥n firmada con el canal actualizado.

üîπ Cierre del canal (con acuerdo):
1Ô∏è‚É£ Se ejecuta una transacci√≥n desde la billetera multi-firma para repartir fondos.
2Ô∏è‚É£ Se elimina la transacci√≥n que crear√≠a el canal.

üîπ Cierre del canal (sin acuerdo):
1Ô∏è‚É£ Un usuario despliega el canal de pago desde la billetera multi-firma.
2Ô∏è‚É£ Se inicia el proceso de disputa llamando a `startDispute()`.
3Ô∏è‚É£ Los fondos se pueden retirar una vez que el per√≠odo de disputa expire.
*/

contract BiDirectionalPaymentChannel {
    using ECDSA for bytes32;

    event DisputeStarted(address indexed user, uint256 nonce);
    event FundsWithdrawn(address indexed to, uint256 amount);

    address payable[2] public participants;
    mapping(address => bool) public isParticipant;
    mapping(address => uint256) public accountBalances;

    uint256 public disputeDuration;
    uint256 public expirationTime;
    uint256 public currentNonce;

    // üìå Modificador para validar que los balances sean correctos
    modifier validateBalances(uint256[2] memory _balances) {
        require(
            address(this).balance >= _balances[0] + _balances[1],
            "Saldo insuficiente en el contrato"
        );
        _;
    }

    // üìå Inicializa el canal de pago con los usuarios y sus fondos
    constructor(
        address payable[2] memory _participants,
        uint256[2] memory _balances,
        uint256 _expirationTime,
        uint256 _disputeDuration
    ) payable validateBalances(_balances) {
        require(_expirationTime > block.timestamp, "Tiempo de expiracion invalido");
        require(_disputeDuration > 0, "Duracion de disputa inv√°lida");

        for (uint256 i = 0; i < _participants.length; i++) {
            address payable user = _participants[i];
            require(!isParticipant[user], "Usuario duplicado");

            participants[i] = user;
            isParticipant[user] = true;
            accountBalances[user] = _balances[i];
        }

        expirationTime = _expirationTime;
        disputeDuration = _disputeDuration;
    }

    // üìå Verifica las firmas proporcionadas para asegurar la validez de los datos
    function verifySignatures(
        bytes[2] memory _signatures,
        address _contractAddress,
        address[2] memory _signers,
        uint256[2] memory _balances,
        uint256 _nonce
    ) public pure returns (bool) {
        for (uint256 i = 0; i < _signatures.length; i++) {
            bool isValid = _signers[i] ==
                keccak256(abi.encodePacked(_contractAddress, _balances, _nonce))
                    .toEthSignedMessageHash().recover(_signatures[i]);

            if (!isValid) {
                return false;
            }
        }
        return true;
    }

    // üìå Modificador para asegurar que las firmas sean correctas antes de actualizar los balances
    modifier checkValidSignatures(
        bytes[2] memory _signatures,
        uint256[2] memory _balances,
        uint256 _nonce
    ) {
        address[2] memory signers;
        for (uint256 i = 0; i < participants.length; i++) {
            signers[i] = participants[i];
        }

        require(
            verifySignatures(_signatures, address(this), signers, _balances, _nonce),
            "Firmas inv√°lidas"
        );

        _;
    }

    // üìå Modificador para asegurar que solo los participantes puedan ejecutar ciertas funciones
    modifier onlyParticipant() {
        require(isParticipant[msg.sender], "Acceso no autorizado");
        _;
    }

    // üìå Inicia una disputa y actualiza los balances en caso de desacuerdo
    function startDispute(
        uint256[2] memory _balances,
        uint256 _nonce,
        bytes[2] memory _signatures
    )
        public
        onlyParticipant
        checkValidSignatures(_signatures, _balances, _nonce)
        validateBalances(_balances)
    {
        require(block.timestamp < expirationTime, "El per√≠odo de disputa ha expirado");
        require(_nonce > currentNonce, "Nonce debe ser mayor al anterior");

        for (uint256 i = 0; i < _balances.length; i++) {
            accountBalances[participants[i]] = _balances[i];
        }

        currentNonce = _nonce;
        expirationTime = block.timestamp + disputeDuration;

        emit DisputeStarted(msg.sender, currentNonce);
    }

    // üìå Permite retirar fondos una vez que expire el per√≠odo de disputa
    function withdrawFunds() public onlyParticipant {
        require(block.timestamp >= expirationTime, "El per√≠odo de disputa a√∫n no ha expirado");

        uint256 amount = accountBalances[msg.sender];
        accountBalances[msg.sender] = 0;

        (bool sent,) = msg.sender.call{value: amount}("");
        require(sent, "Error al enviar fondos");

        emit FundsWithdrawn(msg.sender, amount);
    }
}
