// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

// ðŸ”¹ Este es un patrÃ³n de proxy transparente para contratos actualizables
// ðŸ”¹ Separa la lÃ³gica del contrato de los datos almacenados en el proxy
// ðŸ”¹ Usa `delegatecall` para reenviar llamadas al contrato de implementaciÃ³n

// ðŸ“Œ Primera versiÃ³n del contrato lÃ³gico
contract CounterLogicV1 {
    uint256 public counter;

    function increase() external {
        counter += 1;
    }
}

// ðŸ“Œ Segunda versiÃ³n con funciÃ³n adicional
contract CounterLogicV2 {
    uint256 public counter;

    function increase() external {
        counter += 1;
    }

    function decrease() external {
        counter -= 1;
    }
}

// ðŸ“Œ Proxy bÃ¡sico con administraciÃ³n manual
contract BasicProxy {
    address public implementation;
    address public admin;

    constructor() {
        admin = msg.sender; // Define al administrador del contrato
    }

        // ðŸ“Œ FunciÃ³n interna que redirige las llamadas al contrato de implementaciÃ³n usando `delegatecall`
    function _delegate() private {
        // ðŸ”¹ delegatecall ejecuta la funciÃ³n en el contexto del proxy, pero usa la lÃ³gica del contrato de implementaciÃ³n
        (bool success,) = implementation.delegatecall(msg.data);
        
        // ðŸ”¹ Si la llamada falla, revertimos la transacciÃ³n con un mensaje de error
        require(success, "delegatecall failed");
    }

    // ðŸ“Œ Fallback function: cualquier llamada que no coincida con una funciÃ³n existente serÃ¡ redirigida a la implementaciÃ³n
    fallback() external payable {
        _delegate(); // ðŸ”¹ Redirige la ejecuciÃ³n a la implementaciÃ³n
    }

    // ðŸ“Œ Recibe Ether en el contrato y lo redirige a la implementaciÃ³n
    receive() external payable {
        _delegate(); // ðŸ”¹ Permite recibir pagos en el proxy y reenviarlos a la implementaciÃ³n
    }

    // ðŸ“Œ FunciÃ³n para actualizar la implementaciÃ³n (solo admin)
    function upgradeTo(address newImplementation) external {
        require(msg.sender == admin, "not authorized");
        implementation = newImplementation;
    }
}

// ðŸ“Œ Contrato que devuelve los identificadores de funciones
contract DeveloperHelper {
    function getSelectors() external view returns (bytes4, bytes4, bytes4) {
        return (
            SmartProxy.admin.selector,
            SmartProxy.implementation.selector,
            SmartProxy.upgradeTo.selector
        );
    }
}

// ðŸ“Œ Proxy avanzado con almacenamiento estructurado
contract SmartProxy {
    // ðŸ”¹ Definimos ubicaciones de almacenamiento siguiendo EIP-1967 para evitar colisiones
    bytes32 private constant IMPLEMENTATION_SLOT =
        bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1);
    bytes32 private constant ADMIN_SLOT =
        bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1);

    constructor() {
        _setAdmin(msg.sender);
    }

    modifier onlyAdmin() {
        if (msg.sender == _getAdmin()) {
            _;
        } else {
            _fallback();
        }
    }

    function _getAdmin() private view returns (address) {
        return StorageUtils.getAddressSlot(ADMIN_SLOT).value;
    }

    function _setAdmin(address newAdmin) private {
        require(newAdmin != address(0), "admin cannot be zero address");
        StorageUtils.getAddressSlot(ADMIN_SLOT).value = newAdmin;
    }

    function _getImplementation() private view returns (address) {
        return StorageUtils.getAddressSlot(IMPLEMENTATION_SLOT).value;
    }

    function _setImplementation(address newImplementation) private {
        require(newImplementation.code.length > 0, "invalid implementation");
        StorageUtils.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;
    }

    // ðŸ“Œ Funciones administrativas
    function changeAdmin(address newAdmin) external onlyAdmin {
        _setAdmin(newAdmin);
    }

    function upgradeTo(address newImplementation) external onlyAdmin {
        _setImplementation(newImplementation);
    }

    function admin() external onlyAdmin returns (address) {
        return _getAdmin();
    }

    function implementation() external onlyAdmin returns (address) {
        return _getImplementation();
    }

    // ðŸ“Œ DelegaciÃ³n de llamadas a la implementaciÃ³n
    function _delegate(address newImplementation) internal virtual {
        assembly {
            calldatacopy(0, 0, calldatasize())
            let success :=
                delegatecall(gas(), newImplementation, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())

            switch success
            case 0 { revert(0, returndatasize()) }
            default { return(0, returndatasize()) }
        }
    }

    function _fallback() private {
        _delegate(_getImplementation());
    }

    fallback() external payable {
        _fallback();
    }

    receive() external payable {
        _fallback();
    }
}

// ðŸ“Œ Administrador externo del proxy
contract ProxyController {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "not authorized");
        _;
    }

    function getProxyAdmin(address proxy) external view returns (address) {
        (bool success, bytes memory response) =
            proxy.staticcall(abi.encodeCall(SmartProxy.admin, ()));
        require(success, "call failed");
        return abi.decode(response, (address));
    }

    function getProxyImplementation(address proxy)
        external
        view
        returns (address)
    {
        (bool success, bytes memory response) =
            proxy.staticcall(abi.encodeCall(SmartProxy.implementation, ()));
        require(success, "call failed");
        return abi.decode(response, (address));
    }

    function changeProxyAdmin(address payable proxy, address newAdmin)
        external
        onlyOwner
    {
        SmartProxy(proxy).changeAdmin(newAdmin);
    }

    function upgrade(address payable proxy, address newImplementation)
        external
        onlyOwner
    {
        SmartProxy(proxy).upgradeTo(newImplementation);
    }
}

// ðŸ“Œ LibrerÃ­a para manejar almacenamiento en espacios especÃ­ficos
library StorageUtils {
    struct AddressSlot {
        address value;
    }

    function getAddressSlot(bytes32 slot)
        internal
        pure
        returns (AddressSlot storage result)
    {
        assembly {
            result.slot := slot
        }
    }
}

// ðŸ“Œ Contrato de prueba para almacenamiento de valores en un slot
contract TestStorage {
    bytes32 public constant testSlot = keccak256("TEST_SLOT");

    function getStoredValue() external view returns (address) {
        return StorageUtils.getAddressSlot(testSlot).value;
    }

    function writeStoredValue(address newValue) external {
        StorageUtils.getAddressSlot(testSlot).value = newValue;
    }
}

// ðŸ“Œ ExplicaciÃ³n del CÃ³digo

// ðŸ”¹ CounterLogicV1 y CounterLogicV2: Son contratos de lÃ³gica que representan la implementaciÃ³n inicial y su actualizaciÃ³n.
// ðŸ”¹ BasicProxy: Es un proxy bÃ¡sico que permite redirigir llamadas a una implementaciÃ³n sin manejo de administraciÃ³n avanzada.
// ðŸ”¹ SmartProxy: Un proxy avanzado que sigue EIP-1967, con almacenamiento estructurado y seguridad mejorada.
// ðŸ”¹ ProxyController: Administra actualizaciones y cambios de administrador para SmartProxy.
// ðŸ”¹ StorageUtils: Maneja espacios de almacenamiento de manera eficiente en la blockchain.
// ðŸ”¹ TestStorage: Permite probar cÃ³mo se almacenan valores en slots especÃ­ficos.

// ðŸš€ Â¿CÃ³mo usarlo en Remix?
// 	1.	Deploy CounterLogicV1 â€“ Guarda la direcciÃ³n del contrato.
// 	2.	Deploy SmartProxy â€“ Usa changeAdmin() para definir un administrador.
// 	3.	Usa upgradeTo() en SmartProxy y pÃ¡sale la direcciÃ³n de CounterLogicV1.
// 	4.	InteractÃºa con SmartProxy como si fuera CounterLogicV1.
// 	5.	Deploy CounterLogicV2 y usa upgradeTo() para actualizar.
// 	6.	Ahora SmartProxy usa CounterLogicV2, sin cambiar su direcciÃ³n.

// ðŸ“Œ Â¿Por quÃ© es Ãºtil este patrÃ³n de proxy transparente?

// âœ… Permite actualizar contratos sin cambiar la direcciÃ³n.
// âœ… Eficiencia en gas al delegar llamadas sin duplicar almacenamiento.
// âœ… Seguridad al restringir quiÃ©n puede actualizar (onlyAdmin).
// âœ… Compatible con herramientas como Hardhat y Foundry.